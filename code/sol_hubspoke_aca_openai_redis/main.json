{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.32.4.45862",
      "templateHash": "8202763782429855826"
    }
  },
  "parameters": {
    "appname": {
      "type": "string",
      "defaultValue": "app",
      "metadata": {
        "description": "Name of the workload"
      }
    },
    "env": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": [
        "prod",
        "acc",
        "test",
        "dev"
      ],
      "metadata": {
        "description": "Workload environment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the workload"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags to be assigned to the created resources."
      }
    },
    "hubvnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.3.0.0/16",
      "metadata": {
        "description": "HUB vNET CIDR"
      }
    },
    "ServicesSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.3.0.0/24",
      "metadata": {
        "description": "HUB Services subnet CIDR"
      }
    },
    "BastionSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.3.1.0/24",
      "metadata": {
        "description": "HUB Bastion subnet CIDR"
      }
    },
    "ManagementSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.3.2.0/24",
      "metadata": {
        "description": "HUB Management subnet CIDR"
      }
    },
    "RunnersSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.3.3.0/24",
      "metadata": {
        "description": "HUB Runner agents subnet CIDR"
      }
    },
    "spokeVnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.2.0.0/16",
      "metadata": {
        "description": "spoke vNET CIDR"
      }
    },
    "spokeACASubnetPrefix": {
      "type": "string",
      "defaultValue": "10.2.0.0/24",
      "metadata": {
        "description": "Spoke front-end subnet CIDR"
      }
    },
    "spokeloadbalancerSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.2.1.0/24",
      "metadata": {
        "description": "Spoke business logic subnet CIDR"
      }
    },
    "spokeBackendSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.2.2.0/24",
      "metadata": {
        "description": "Spoke back-end subnet CIDR"
      }
    },
    "spokeServicesSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.2.3.0/24",
      "metadata": {
        "description": "Spoke services subnet CIDR"
      }
    },
    "vmSKU": {
      "type": "string",
      "defaultValue": "Standard_B2ms",
      "metadata": {
        "description": "SKU Size for the virtual machines"
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "The username to use for the virtual machine."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password to use for the virtual machine."
      }
    }
  },
  "variables": {
    "baseName": "[format('{0}-{1}-{2}', parameters('location'), parameters('appname'), parameters('env'))]",
    "suffix": "[uniqueString(subscription().subscriptionId, resourceGroup().id)]",
    "openAiDnsZoneName": "privatelink.openai.azure.com",
    "redisPrivateDnsZoneNames": "privatelink.redis.cache.windows.net",
    "redisResourceName": "[format('redis-{0}', variables('baseName'))]",
    "privateDnsZoneNames": "privatelink.azurecr.io"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "la-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logworkspaceName": {
            "value": "la-hub"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "PerGB2018"
          },
          "retention": {
            "value": 30
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "5813230445666576623"
            }
          },
          "parameters": {
            "logworkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the workspace"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location of the workspace"
              }
            },
            "sku": {
              "type": "string",
              "allowedValues": [
                "Free",
                "Standalone",
                "PerNode",
                "PerGB2018"
              ],
              "metadata": {
                "description": "SKU for the workspace"
              }
            },
            "retention": {
              "type": "int",
              "metadata": {
                "description": "Retention time in days for the workspace. 730 Days is the max for non unlimited skus"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('logworkspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]"
                },
                "retentionInDays": "[parameters('retention')]",
                "publicNetworkAccessForIngestion": "Disabled",
                "publicNetworkAccessForQuery": "Disabled"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace."
              },
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logworkspaceName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "HubNetwork-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('hubvnetAddressPrefix')]"
          },
          "bastionSubnetPrefix": {
            "value": "[parameters('BastionSubnetPrefix')]"
          },
          "managementSubnetPrefix": {
            "value": "[parameters('ManagementSubnetPrefix')]"
          },
          "runneragentSubnetPrefix": {
            "value": "[parameters('RunnersSubnetPrefix')]"
          },
          "servicesSubnetPrefix": {
            "value": "[parameters('ServicesSubnetPrefix')]"
          },
          "logworkspaceid": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'la-deployment'), '2022-09-01').outputs.resourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "6017185047028956224"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The resource group location"
              }
            },
            "vnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the vnet"
              }
            },
            "bastionSubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the bastion subnet"
              }
            },
            "managementSubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the management subnet"
              }
            },
            "runneragentSubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the runneragents subnet"
              }
            },
            "servicesSubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the services subnet"
              }
            },
            "logworkspaceid": {
              "type": "string",
              "metadata": {
                "description": "The ID of the logworkspace"
              }
            }
          },
          "variables": {
            "vnetName": "vnet-hub",
            "bastionSubnetName": "AzureBastionSubnet",
            "managementSubnetName": "snet-hub-management",
            "runneragentSubnetName": "snet-hub-runneragents",
            "servicesSubnetName": "snet-hub-services"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-08-01",
              "name": "nsg-hub-bastion",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "bastionInAllow",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "Internet",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "bastionControlInAllow",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "GatewayManager",
                      "destinationPortRanges": [
                        "443",
                        "4443"
                      ],
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowLoadBalancerInBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowBastionHostCommunicationInBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 140,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "bastionInDeny",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 900,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "bastionVnetOutAllow",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationPortRanges": [
                        "22",
                        "3389"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "bastionAzureOutAllow",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "AzureCloud",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', 'nsg-hub-bastion')]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-bastion')]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "nsg-hub-management",
              "location": "[parameters('location')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', 'nsg-hub-management')]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-management')]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "nsg-hub-runneragent",
              "location": "[parameters('location')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', 'nsg-hub-runneragent')]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-runneragent')]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "nsg-hub-services",
              "location": "[parameters('location')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', 'nsg-hub-services')]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-services')]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-11-01",
              "name": "[variables('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('bastionSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('bastionSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-bastion')]"
                      }
                    }
                  },
                  {
                    "name": "[variables('managementSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('managementSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-management')]"
                      }
                    }
                  },
                  {
                    "name": "[variables('runneragentSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('runneragentSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-runneragent')]"
                      }
                    }
                  },
                  {
                    "name": "[variables('servicesSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('servicesSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-services')]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-bastion')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-management')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-runneragent')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-hub-services')]"
              ]
            }
          ],
          "outputs": {
            "vnetResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            },
            "bastionSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('bastionSubnetName'))]"
            },
            "managementSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('managementSubnetName'))]"
            },
            "runneragentSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('runneragentSubnetName'))]"
            },
            "servicesSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('servicesSubnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'la-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vNET-ACA-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "baseName": {
            "value": "[variables('baseName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('spokeVnetAddressPrefix')]"
          },
          "spokeACASubnetPrefix": {
            "value": "[parameters('spokeACASubnetPrefix')]"
          },
          "spokeBackendSubnetPrefix": {
            "value": "[parameters('spokeBackendSubnetPrefix')]"
          },
          "spokeloadbalancerSubnetPrefix": {
            "value": "[parameters('spokeloadbalancerSubnetPrefix')]"
          },
          "spokeServicesSubnetPrefix": {
            "value": "[parameters('spokeServicesSubnetPrefix')]"
          },
          "logworkspaceid": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'la-deployment'), '2022-09-01').outputs.resourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "12399246367457836819"
            }
          },
          "parameters": {
            "baseName": {
              "type": "string",
              "metadata": {
                "description": "Base name for the application"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The resource group location"
              }
            },
            "vnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the vnet"
              }
            },
            "spokeACASubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the ACA subnet"
              }
            },
            "spokeloadbalancerSubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the loadbalancer subnet"
              }
            },
            "spokeBackendSubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the backend subnet"
              }
            },
            "spokeServicesSubnetPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR range for the services subnet"
              }
            },
            "logworkspaceid": {
              "type": "string",
              "metadata": {
                "description": "The ID of the logworkspace"
              }
            }
          },
          "variables": {
            "vnetName": "[format('vnet-{0}', parameters('baseName'))]",
            "acaSubnetName": "[format('snet-{0}-aca', parameters('baseName'))]",
            "backendSubnetName": "[format('snet-{0}-backend', parameters('baseName'))]",
            "servicesSubnetName": "[format('snet-{0}-services', parameters('baseName'))]",
            "loadbalancerSubnetName": "[format('snet-{0}-loadbalancer', parameters('baseName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('nsg-{0}-aca', parameters('baseName'))]",
              "location": "[parameters('location')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}-aca', parameters('baseName')))]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-aca', parameters('baseName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "[format('nsg-{0}-backend', parameters('baseName'))]",
              "location": "[parameters('location')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}-backend', parameters('baseName')))]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-backend', parameters('baseName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "[format('nsg-{0}-loadbalancer', parameters('baseName'))]",
              "location": "[parameters('location')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}-loadbalancer', parameters('baseName')))]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-loadbalancer', parameters('baseName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "[format('nsg-{0}-services', parameters('baseName'))]",
              "location": "[parameters('location')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}-services', parameters('baseName')))]",
              "name": "to-la",
              "properties": {
                "workspaceId": "[parameters('logworkspaceid')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-services', parameters('baseName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-11-01",
              "name": "[variables('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('acaSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('spokeACASubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-aca', parameters('baseName')))]"
                      },
                      "delegations": [
                        {
                          "name": "acadelegation",
                          "properties": {
                            "serviceName": "Microsoft.App/environments"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "[variables('loadbalancerSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('spokeloadbalancerSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-loadbalancer', parameters('baseName')))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('backendSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('spokeBackendSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-backend', parameters('baseName')))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('servicesSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('spokeServicesSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-services', parameters('baseName')))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-aca', parameters('baseName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-backend', parameters('baseName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-loadbalancer', parameters('baseName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-services', parameters('baseName')))]"
              ]
            }
          ],
          "outputs": {
            "vnetResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            },
            "acaSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('acaSubnetName'))]"
            },
            "loadbalancerSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('backendSubnetName'))]"
            },
            "backendSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('backendSubnetName'))]"
            },
            "servicesSubnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('servicesSubnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'la-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vNETPeering-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sourceNetworkname": {
            "value": "vnet-hub"
          },
          "destinationNetworkname": {
            "value": "[format('vnet-{0}', variables('baseName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "1444200431379011727"
            }
          },
          "parameters": {
            "sourceNetworkname": {
              "type": "string"
            },
            "destinationNetworkname": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('sourceNetworkname'), format('{0}-To-{1}', parameters('sourceNetworkname'), parameters('destinationNetworkname')))]",
              "properties": {
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('destinationNetworkname'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('destinationNetworkname'), format('{0}-To-{1}', parameters('destinationNetworkname'), parameters('sourceNetworkname')))]",
              "properties": {
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('sourceNetworkname'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "PIP-Bastion-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "publicIpAddressName": {
            "value": "pip-bastion"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "Standard"
          },
          "publicIPAllocationMethod": {
            "value": "Static"
          },
          "ddosProtectionMode": {
            "value": "Enabled"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "508362490791024294"
            }
          },
          "parameters": {
            "publicIpAddressName": {
              "type": "string",
              "defaultValue": "myPublicIPAddress",
              "metadata": {
                "description": "Name of the public IP address resource."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the deployment, resource group and resources."
              }
            },
            "extendedLocation": {
              "type": "object",
              "defaultValue": {}
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "Basic"
              ],
              "metadata": {
                "description": "Sku for the resource."
              }
            },
            "domainNameLabel": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Domain name label for the resource."
              }
            },
            "domainNameLabelScope": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Domain name label scope for the resource."
              }
            },
            "routingPreference": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Routing Preference for the resource."
              }
            },
            "publicIPAllocationMethod": {
              "type": "string",
              "allowedValues": [
                "Dynamic",
                "Static"
              ],
              "metadata": {
                "description": "Allocation method for the resource."
              }
            },
            "publicIpAddressVersion": {
              "type": "string",
              "defaultValue": "IPv4",
              "allowedValues": [
                "IPv4",
                "IPv6"
              ],
              "metadata": {
                "description": "Version for the resource."
              }
            },
            "idleTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Idle Timeout for the resource."
              }
            },
            "tier": {
              "type": "string",
              "defaultValue": "Regional",
              "allowedValues": [
                "Regional",
                "Global"
              ],
              "metadata": {
                "description": "Tier for the resource."
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Zones for the resource."
              }
            },
            "ddosProtectionMode": {
              "type": "string",
              "allowedValues": [
                "Disabled",
                "Enabled",
                "VirtualNetworkInherited"
              ]
            },
            "tagsByResource": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional tags for the resources."
              }
            }
          },
          "variables": {
            "dns": {
              "domainNameLabel": "[parameters('domainNameLabel')]",
              "domainNameLabelScope": "[parameters('domainNameLabelScope')]"
            },
            "tags": [
              {
                "ipTagType": "RoutingPreference",
                "tag": "[parameters('routingPreference')]"
              }
            ],
            "ipTagsVariable": "[if(empty(parameters('routingPreference')), null(), variables('tags'))]",
            "ddosSettings": "[if(empty(parameters('ddosProtectionMode')), null(), createObject('protectionMode', parameters('ddosProtectionMode')))]",
            "propertiesNoDns": {
              "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
              "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
              "publicIPAddressVersion": "[parameters('publicIpAddressVersion')]",
              "ipTags": "[variables('ipTagsVariable')]",
              "ddosSettings": "[variables('ddosSettings')]"
            },
            "propertiesDns": {
              "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
              "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
              "publicIPAddressVersion": "[parameters('publicIpAddressVersion')]",
              "dnsSettings": "[variables('dns')]",
              "ipTags": "[variables('ipTagsVariable')]",
              "ddosSettings": "[variables('ddosSettings')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-11-01",
              "name": "[parameters('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "extendedLocation": "[if(empty(parameters('extendedLocation')), null(), parameters('extendedLocation'))]",
              "zones": "[parameters('zones')]",
              "tags": "[parameters('tagsByResource')]",
              "sku": {
                "name": "[parameters('sku')]",
                "tier": "[parameters('tier')]"
              },
              "properties": "[if(empty(parameters('domainNameLabel')), variables('propertiesNoDns'), variables('propertiesDns'))]"
            }
          ],
          "outputs": {
            "pipid": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "bastion-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "baseName": {
            "value": "Hub"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetname": {
            "value": "vnet-hub"
          },
          "bastionSubnetName": {
            "value": "AzureBastionSubnet"
          },
          "bastionPIPid": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'PIP-Bastion-deployment'), '2022-09-01').outputs.pipid.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "8886481131183844145"
            }
          },
          "parameters": {
            "baseName": {
              "type": "string",
              "metadata": {
                "description": "This is the base name for each Azure resource name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The resource group location"
              }
            },
            "vnetname": {
              "type": "string",
              "metadata": {
                "description": "vnet name"
              }
            },
            "bastionSubnetName": {
              "type": "string",
              "metadata": {
                "description": "Bastion subnet name"
              }
            },
            "bastionPIPid": {
              "type": "string",
              "metadata": {
                "description": "Bastion public ip resource ID"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2021-08-01",
              "name": "[format('bas-{0}', parameters('baseName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "IpConf",
                    "properties": {
                      "subnet": {
                        "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetname')), parameters('bastionSubnetName'))]"
                      },
                      "publicIPAddress": {
                        "id": "[parameters('bastionPIPid')]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'PIP-Bastion-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "AMPLS-Hub-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceResourceID": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'la-deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "workspaceSubnetID": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.servicesSubnetID.value]"
          },
          "vnetResourceID": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.vnetResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "12346809028294016377"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location of workspace"
              }
            },
            "workspaceSubnetID": {
              "type": "string",
              "metadata": {
                "description": "subnet ID for workspace"
              }
            },
            "vnetResourceID": {
              "type": "string",
              "metadata": {
                "description": "vnet resource ID for workspace"
              }
            },
            "workspaceResourceID": {
              "type": "string",
              "metadata": {
                "description": "Resource ID for workspace"
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [
                "agentsvc.azure-automation.net",
                "[format('blob.{0}', environment().suffixes.storage)]",
                "monitor.azure.com",
                "ods.opinsights.azure.com",
                "oms.opinsights.azure.com"
              ]
            }
          },
          "variables": {
            "suffix": "[uniqueString(subscription().subscriptionId, resourceGroup().id)]"
          },
          "resources": [
            {
              "type": "microsoft.insights/privateLinkScopes",
              "apiVersion": "2021-07-01-preview",
              "name": "ampls-Hub",
              "location": "global",
              "properties": {
                "accessModeSettings": {
                  "ingestionAccessMode": "PrivateOnly",
                  "queryAccessMode": "Open"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "pe-ampls-Hub",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('workspaceSubnetID')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "pe-ampls-connection",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('microsoft.insights/privateLinkScopes', 'ampls-Hub')]",
                      "groupIds": [
                        "azuremonitor"
                      ]
                    }
                  }
                ],
                "customNetworkInterfaceName": "[format('pe-ampls-{0}-nic', variables('suffix'))]"
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/privateLinkScopes', 'ampls-Hub')]",
                "privateDnsZoneForAmpls"
              ]
            },
            {
              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
              "apiVersion": "2021-07-01-preview",
              "name": "[format('{0}/{1}', 'ampls-Hub', 'amplsScopedLaw')]",
              "properties": {
                "linkedResourceId": "[parameters('workspaceResourceID')]"
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/privateLinkScopes', 'ampls-Hub')]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsZoneForAmpls",
                "count": "[length(parameters('zones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.{0}', parameters('zones')[copyIndex()])]",
              "location": "global",
              "properties": {}
            },
            {
              "copy": {
                "name": "privateDnsZoneLink",
                "count": "[length(parameters('zones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.{0}', parameters('zones')[copyIndex()]), format('{0}-link', parameters('zones')[copyIndex()]))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetResourceID')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', parameters('zones')[copyIndex()]))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', 'pe-ampls-Hub', 'pvtEndpointDnsGroupForAmpls')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(parameters('zones'))]",
                    "input": {
                      "name": "[format('privatelink.{0}', parameters('zones')[copyIndex('privateDnsZoneConfigs')])]",
                      "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', parameters('zones')[copyIndex('privateDnsZoneConfigs')]))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', 'pe-ampls-Hub')]",
                "privateDnsZoneForAmpls"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'la-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ManagementVM-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.managementSubnetID.value]"
          },
          "vmName": {
            "value": "Mgmt01"
          },
          "vmAdminUserName": {
            "value": "[parameters('vmAdminUsername')]"
          },
          "vmAdminPassword": {
            "value": "[parameters('vmAdminPassword')]"
          },
          "vmSize": {
            "value": "[parameters('vmSKU')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "13156253837114046879"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy the VM"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "subnet ID the VM should be tied to"
              }
            },
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "name of the VM"
              }
            },
            "vmAdminUserName": {
              "type": "string",
              "metadata": {
                "description": "Username for the admin"
              }
            },
            "vmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "password for the admin account"
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "SKU size"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-nic', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-mid', parameters('vmName'))]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName'))))]": {}
                }
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('vmAdminUserName')]",
                  "adminPassword": "[parameters('vmAdminPassword')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2022-datacenter-azure-edition",
                    "version": "latest"
                  },
                  "osDisk": {
                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": false
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "mi_res_id",
                      "identifier-value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName')))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName')))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ],
          "outputs": {
            "windowsVMId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
            },
            "windowsVMName": {
              "type": "string",
              "value": "[parameters('vmName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "RunnerAgentVM-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.runneragentSubnetID.value]"
          },
          "vmAdminPassword": {
            "value": "[parameters('vmAdminUsername')]"
          },
          "vmAdminUserName": {
            "value": "[parameters('vmAdminPassword')]"
          },
          "vmName": {
            "value": "RA01"
          },
          "vmSize": {
            "value": "[parameters('vmSKU')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "13156253837114046879"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy the VM"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "subnet ID the VM should be tied to"
              }
            },
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "name of the VM"
              }
            },
            "vmAdminUserName": {
              "type": "string",
              "metadata": {
                "description": "Username for the admin"
              }
            },
            "vmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "password for the admin account"
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "SKU size"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-nic', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-mid', parameters('vmName'))]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName'))))]": {}
                }
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('vmAdminUserName')]",
                  "adminPassword": "[parameters('vmAdminPassword')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2022-datacenter-azure-edition",
                    "version": "latest"
                  },
                  "osDisk": {
                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": false
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "mi_res_id",
                      "identifier-value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName')))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-mid', parameters('vmName')))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ],
          "outputs": {
            "windowsVMId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
            },
            "windowsVMName": {
              "type": "string",
              "value": "[parameters('vmName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ACR-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[format('acr{0}', variables('suffix'))]"
          },
          "acrSku": {
            "value": "Premium"
          },
          "zoneRedundancy": {
            "value": "Disabled"
          },
          "acrAdminUserEnabled": {
            "value": false
          },
          "publicNetworkAccess": {
            "value": "Disabled"
          },
          "networkRuleBypassOptions": {
            "value": "AzureServices"
          },
          "diagnosticWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'la-deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "agentPoolSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.servicesSubnetID.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "8246642572803658660"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 5,
              "maxLength": 50,
              "metadata": {
                "description": "Required. Name of your Azure container registry."
              }
            },
            "acrAdminUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable admin user that have push / pull permission to the registry."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "acrSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Premium",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Tier of your Azure container registry."
              }
            },
            "exportPolicyStatus": {
              "type": "string",
              "defaultValue": "disabled",
              "allowedValues": [
                "disabled",
                "enabled"
              ],
              "metadata": {
                "description": "Optional. The value that indicates whether the export policy is enabled or not."
              }
            },
            "quarantinePolicyStatus": {
              "type": "string",
              "defaultValue": "disabled",
              "allowedValues": [
                "disabled",
                "enabled"
              ],
              "metadata": {
                "description": "Optional. The value that indicates whether the quarantine policy is enabled or not."
              }
            },
            "trustPolicyStatus": {
              "type": "string",
              "defaultValue": "disabled",
              "allowedValues": [
                "disabled",
                "enabled"
              ],
              "metadata": {
                "description": "Optional. The value that indicates whether the trust policy is enabled or not."
              }
            },
            "retentionPolicyStatus": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "disabled",
                "enabled"
              ],
              "metadata": {
                "description": "Optional. The value that indicates whether the retention policy is enabled or not."
              }
            },
            "retentionPolicyDays": {
              "type": "int",
              "defaultValue": 15,
              "metadata": {
                "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
              }
            },
            "azureADAuthenticationAsArmPolicyStatus": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "disabled",
                "enabled"
              ],
              "metadata": {
                "description": "Optional. The value that indicates whether the policy for using ARM audience token for a container registr is enabled or not. Default is enabled."
              }
            },
            "softDeletePolicyStatus": {
              "type": "string",
              "defaultValue": "disabled",
              "allowedValues": [
                "disabled",
                "enabled"
              ],
              "metadata": {
                "description": "Optional. Soft Delete policy status. Default is disabled."
              }
            },
            "softDeletePolicyDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Optional. The number of days after which a soft-deleted item is permanently deleted."
              }
            },
            "dataEndpointEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access. Note, requires the 'acrSku' to be 'Premium'."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkRuleSetIpRules are not set.  Note, requires the 'acrSku' to be 'Premium'."
              }
            },
            "networkRuleBypassOptions": {
              "type": "string",
              "defaultValue": "AzureServices",
              "allowedValues": [
                "AzureServices",
                "None"
              ],
              "metadata": {
                "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
              }
            },
            "networkRuleSetDefaultAction": {
              "type": "string",
              "defaultValue": "Deny",
              "allowedValues": [
                "Allow",
                "Deny"
              ],
              "metadata": {
                "description": "Optional. The default action of allow or deny when no other rules match."
              }
            },
            "networkRuleSetIpRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The IP ACL rules. Note, requires the 'acrSku' to be 'Premium'."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'acrSku' to be 'Premium'."
              }
            },
            "zoneRedundancy": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "allLogs",
                "ContainerRegistryRepositoryEvents",
                "ContainerRegistryLoginEvents"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
              }
            },
            "anonymousPullEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables registry-wide pull from unauthenticated clients. It's in preview and available in the Standard and Premium service tiers."
              }
            },
            "cMKKeyVaultResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of a key vault to reference a customer managed key for encryption from. Note, CMK requires the 'acrSku' to be 'Premium'."
              }
            },
            "cMKKeyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the customer managed key to use for encryption. Note, CMK requires the 'acrSku' to be 'Premium'."
              }
            },
            "cMKKeyVersion": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, the latest key version is used."
              }
            },
            "cMKUserAssignedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. User assigned identity to use when fetching the customer managed key. Note, CMK requires the 'acrSku' to be 'Premium'. Required if 'cMKKeyName' is not empty."
              }
            },
            "agentPoolName": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. The name of the agent pool. This agent pool will be used to build docker image to be deployed."
              }
            },
            "agentPoolCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Optional. The number of agents in the agent pool."
              }
            },
            "agentPoolTier": {
              "type": "string",
              "defaultValue": "S2",
              "allowedValues": [
                "S1",
                "S2",
                "S3",
                "I6"
              ],
              "metadata": {
                "description": "Optional. The tier of the agent pool."
              }
            },
            "agentPoolSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the subnet to which the agent pool will be connected."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogsSpecified",
                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                "input": {
                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                  "enabled": true
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true
                }
              }
            ],
            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]",
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2022-02-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('acrSku')]"
              },
              "properties": {
                "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                "encryption": "[if(not(empty(parameters('cMKKeyName'))), createObject('status', 'enabled', 'keyVaultProperties', createObject('identity', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKUserAssignedIdentityResourceId'), '/')[2], split(parameters('cMKUserAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('cMKUserAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId, 'keyIdentifier', if(not(empty(parameters('cMKKeyVersion'))), format('{0}/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[0], split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[1]), '2021-10-01').keyUri, parameters('cMKKeyVersion')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[0], split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[1]), '2021-10-01').keyUriWithVersion))), null())]",
                "policies": {
                  "azureADAuthenticationAsArmPolicy": {
                    "status": "[parameters('azureADAuthenticationAsArmPolicyStatus')]"
                  },
                  "exportPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('exportPolicyStatus')), null())]",
                  "quarantinePolicy": {
                    "status": "[parameters('quarantinePolicyStatus')]"
                  },
                  "trustPolicy": {
                    "type": "Notary",
                    "status": "[parameters('trustPolicyStatus')]"
                  },
                  "retentionPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('days', parameters('retentionPolicyDays'), 'status', parameters('retentionPolicyStatus')), null())]",
                  "softDeletePolicy": {
                    "retentionDays": "[parameters('softDeletePolicyDays')]",
                    "status": "[parameters('softDeletePolicyStatus')]"
                  }
                },
                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSetIpRules'))), 'Disabled', null()))]",
                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                "networkRuleSet": "[if(not(empty(parameters('networkRuleSetIpRules'))), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', parameters('networkRuleSetIpRules')), null())]",
                "zoneRedundancy": "[if(equals(parameters('acrSku'), 'Premium'), parameters('zoneRedundancy'), null())]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerRegistry/registries/agentPools",
              "apiVersion": "2019-06-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('agentPoolName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "count": "[parameters('agentPoolCount')]",
                "os": "Linux",
                "tier": "[parameters('agentPoolTier')]",
                "virtualNetworkSubnetResourceId": "[parameters('agentPoolSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ],
              "metadata": {
                "description": "This agentPool associated with the Azure subnet, will be used to build docker image in ACR build task."
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The Name of the Azure container registry."
              },
              "value": "[parameters('name')]"
            },
            "loginServer": {
              "type": "string",
              "metadata": {
                "description": "The reference to the Azure container registry."
              },
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure container registry."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure container registry."
              },
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2022-02-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2022-02-01-preview', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2022-02-01-preview', 'full').location]"
            },
            "agentPoolName": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of Azure container registry agent pool, used for docker image build."
              },
              "value": "[parameters('agentPoolName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'la-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ACR-Network-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "azServicePrivateDnsZoneName": {
            "value": "[variables('privateDnsZoneNames')]"
          },
          "azServiceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'ACR-Deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "privateEndpointName": {
            "value": "pe-acr"
          },
          "privateEndpointSubResourceName": {
            "value": "registry"
          },
          "virtualNetworkLinks": {
            "value": "[concat(createArray(createObject('vnetName', format('vnet-{0}', variables('baseName')), 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())), createArray(createObject('vnetName', 'vnet-Hub', 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())))]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.servicesSubnetID.value]"
          },
          "vnetHubResourceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.vnetResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "9182273978656145953"
            }
          },
          "parameters": {
            "virtualNetworkLinks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
              }
            },
            "vnetHubResourceId": {
              "type": "string",
              "metadata": {
                "description": "if empty, private dns zone will be deployed in the current RG scope"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
              }
            },
            "azServiceId": {
              "type": "string",
              "metadata": {
                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
              }
            },
            "azServicePrivateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Resource name of the Private Endpoint"
              }
            },
            "privateEndpointSubResourceName": {
              "type": "string",
              "metadata": {
                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
              }
            }
          },
          "variables": {
            "vnetHubSplitTokens": "[if(contains(parameters('vnetHubResourceId'), '/'), split(parameters('vnetHubResourceId'), '/'), array(''))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                  },
                  "virtualNetworkLinks": {
                    "value": "[parameters('virtualNetworkLinks')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "4935098812369375293"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateDnsZonesId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                  },
                  "privateLinkServiceId": {
                    "value": "[parameters('azServiceId')]"
                  },
                  "snetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "subresource": {
                    "value": "[parameters('privateEndpointSubResourceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "3909338819833191592"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "snetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                      }
                    },
                    "subresource": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                      }
                    },
                    "privateDnsZonesId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('snetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pl-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subresource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "config1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'ACR-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvault-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vNETResourceID": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.vnetResourceId.value]"
          },
          "subnetResourceID": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.servicesSubnetID.value]"
          },
          "privateDnsZoneName": {
            "value": "[format('privatelink{0}', environment().suffixes.keyvaultDns)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "11042031665866075392"
            }
          },
          "parameters": {
            "suffix": {
              "type": "string",
              "metadata": {
                "description": "Keyvault suffix"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Deployment location"
              }
            },
            "vNETResourceID": {
              "type": "string",
              "metadata": {
                "description": "Resource ID for the vNET the Private Endpoint will be deployed in"
              }
            },
            "subnetResourceID": {
              "type": "string",
              "metadata": {
                "description": "subnet resource ID for keyvault private endpoint"
              }
            },
            "privateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "Zone name for private DNS"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[format('kv-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "createMode": "default",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableSoftDelete": true,
                "enableRbacAuthorization": true,
                "enablePurgeProtection": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny"
                },
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-01-01",
              "name": "[format('pe-kv-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pe-kv-{0}', parameters('suffix'))]",
                    "properties": {
                      "groupIds": [
                        "vault"
                      ],
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]"
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceID')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/vault-PrivateDnsZoneGroup', format('pe-kv-{0}', parameters('suffix')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDnsZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-kv-{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), uniqueString(resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vNETResourceID')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ACA-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('aca-{0}', variables('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "diagnosticWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'la-deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.acaSubnetID.value]"
          },
          "vnetEndpointInternal": {
            "value": true
          },
          "zoneRedundant": {
            "value": false
          },
          "infrastructureResourceGroupName": {
            "value": ""
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "9208231823622535903"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of your Azure Container Apps Environment. "
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional, default value is false. Sets if the environment will use availability zones. Your Container App Environment and the apps in it will be zone redundant. This requieres vNet integration."
              }
            },
            "workloadProfiles": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional, the workload profiles required by the end user. The default is \"Consumption\", and is automatically added whether workload profiles are specified or not."
              }
            },
            "vnetEndpointInternal": {
              "type": "bool",
              "metadata": {
                "description": "If true, the endpoint is an internal load balancer. If false the hosted apps are exposed on an internet-accessible IP address "
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Custome vnet configuration for the nevironment. NOTE: Current GA (Feb 2023): The subnet associated with a Container App Environment requires a CIDR prefix of /23 or larger"
              }
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "optional, default is empty. App Insights instrumentation key provided to Dapr for tracing"
              }
            },
            "infrastructureResourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "optional, default is empty. Resource group for the infrastructure resources (e.g. load balancer, public IP, etc.)"
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "allLogs",
                "ContainerAppConsoleLogs",
                "ContainerAppSystemLogs",
                "AppEnvSpringAppConsoleLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogsSpecified",
                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                "input": {
                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                  "enabled": true
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true
                }
              }
            ],
            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]",
            "defaultWorkloadProfile": [
              {
                "workloadProfileType": "Consumption",
                "name": "Consumption"
              }
            ],
            "effectiveWorkloadProfiles": "[if(not(equals(parameters('workloadProfiles'), createArray())), concat(variables('defaultWorkloadProfile'), parameters('workloadProfiles')), variables('defaultWorkloadProfile'))]"
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "daprAIInstrumentationKey": "[parameters('appInsightsInstrumentationKey')]",
                "vnetConfiguration": {
                  "internal": "[parameters('vnetEndpointInternal')]",
                  "infrastructureSubnetId": "[parameters('subnetId')]"
                },
                "workloadProfiles": "[variables('effectiveWorkloadProfiles')]",
                "appLogsConfiguration": {
                  "destination": "azure-monitor"
                },
                "infrastructureResourceGroup": "[if(empty(parameters('infrastructureResourceGroupName')), take(format('ME_{0}_{1}', resourceGroup().name, parameters('name')), 63), parameters('infrastructureResourceGroupName'))]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "The Name of the Azure container app environment."
              },
              "value": "[parameters('name')]"
            },
            "containerAppsEnvironmentNameId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure container app environment."
              },
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
            },
            "containerAppsEnvironmentDefaultDomain": {
              "type": "string",
              "metadata": {
                "description": "The default domain of the Azure container app environment."
              },
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain]"
            },
            "containerAppsEnvironmentLoadBalancerIP": {
              "type": "string",
              "metadata": {
                "description": "The Azure container app environment's Load Balancer IP."
              },
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').staticIp]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'la-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ACA-pDNS-Deployment}",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'ACA-deployment'), '2022-09-01').outputs.containerAppsEnvironmentDefaultDomain.value]"
          },
          "virtualNetworkLinks": {
            "value": "[concat(createArray(createObject('vnetName', format('vnet-{0}', variables('baseName')), 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())), createArray(createObject('vnetName', 'vnet-Hub', 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "aRecords": {
            "value": [
              {
                "name": "*",
                "ipv4Address": "[reference(resourceId('Microsoft.Resources/deployments', 'ACA-deployment'), '2022-09-01').outputs.containerAppsEnvironmentLoadBalancerIP.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "4935098812369375293"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
              }
            },
            "aRecords": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of A records to be added to the DNS Zone"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "copy": {
                "name": "privateDnsZoneLink",
                "count": "[length(parameters('virtualNetworkLinks'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
              "location": "global",
              "properties": {
                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "dnsARecord",
                "count": "[length(parameters('aRecords'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
              "properties": {
                "ttl": 60,
                "aRecords": [
                  {
                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZonesId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'ACA-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "OpenAI-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-{1}', parameters('appname'), variables('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "hasPrivateLinks": {
            "value": true
          },
          "diagnosticSettings": {
            "value": [
              {
                "name": "OpenAI-Default-Diag",
                "workspaceResourceId": "[reference(resourceId('Microsoft.Resources/deployments', 'la-deployment'), '2022-09-01').outputs.resourceId.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "7078081739284608009"
            }
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "service": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                    }
                  },
                  "privateDnsZoneResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "groupId": {
                          "type": "string"
                        },
                        "memberName": {
                          "type": "string"
                        },
                        "privateIpAddress": {
                          "type": "string"
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "manualPrivateLinkServiceConnections": {
                    "type": "array",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Manual PrivateLink Service Connections."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to 'AllMetrics' to collect all metrics."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 64,
              "metadata": {
                "description": "Required. Name of the OpenAI Account. Must be globally unique. Only alphanumeric characters and hyphens are allowed. The value must be 2-64 characters long and cannot start or end with a hyphen"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI",
              "allowedValues": [
                "AnomalyDetector",
                "Bing.Autosuggest.v7",
                "Bing.CustomSearch",
                "Bing.EntitySearch",
                "Bing.Search.v7",
                "Bing.SpellCheck.v7",
                "CognitiveServices",
                "ComputerVision",
                "ContentModerator",
                "CustomVision.Prediction",
                "CustomVision.Training",
                "Face",
                "FormRecognizer",
                "ImmersiveReader",
                "Internal.AllInOne",
                "LUIS",
                "LUIS.Authoring",
                "Personalizer",
                "QnAMaker",
                "SpeechServices",
                "TextAnalytics",
                "TextTranslation",
                "OpenAI"
              ],
              "metadata": {
                "description": "Default is OpenAI. Kind of the Cognitive Services. Find available Kind-SKUs compination by running `az cognitiveservices account list-skus --kind OpenAI --location EASTUS2`  Check here: https://learn.microsoft.com/azure/ai-services/create-account-bicep?tabs=CLI."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "allowedValues": [
                "C2",
                "C3",
                "C4",
                "F0",
                "F1",
                "S",
                "S0",
                "S1",
                "S10",
                "S2",
                "S3",
                "S4",
                "S5",
                "S6",
                "S7",
                "S8",
                "S9"
              ],
              "metadata": {
                "description": "Optional. Default is S0 for OpenAI. SKU of the Cognitive Services resource. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. Subdomain name used for token-based authentication. Required if 'networkAcls' or 'privateEndpoints' are set."
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. A collection of rules governing the accessibility from specific network locations."
              }
            },
            "hasPrivateLinks": {
              "type": "bool",
              "metadata": {
                "description": "Whether the resource has private links or not"
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default is true. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Conditional. The ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "allowedFqdnList": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of allowed FQDN."
              }
            },
            "apiProperties": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The API properties for special APIs."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allow only Azure AD authentication. Should be enabled for security reasons."
              }
            },
            "cMKKeyVaultResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The resource ID of a key vault to reference a customer managed key for encryption from. Required if 'cMKKeyName' is not empty."
              }
            },
            "cMKKeyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
              }
            },
            "cMKUserAssignedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
              }
            },
            "cMKKeyVersion": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
              }
            },
            "dynamicThrottlingEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag to enable dynamic throttling."
              }
            },
            "migrationToken": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource migration token."
              }
            },
            "restore": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Restore a soft-deleted cognitive service at deployment time. Will fail if no such soft-deleted resource exists."
              }
            },
            "restrictOutboundNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Restrict outbound network access."
              }
            },
            "userOwnedStorage": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The storage accounts for this resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            }
          },
          "variables": {
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
              "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
              "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
              "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
              "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
              "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
              "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
              "Cognitive Services Face Recognizer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9894cab4-e18a-44aa-828b-cb588cd6f2d7')]",
              "Cognitive Services Immersive Reader User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b2de6794-95db-4659-8781-7e080d3f2b9d')]",
              "Cognitive Services Language Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f07febfe-79bc-46b1-8b37-790e26e6e498')]",
              "Cognitive Services Language Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7628b7b8-a8b2-4cdc-b46f-e9b35248918e')]",
              "Cognitive Services Language Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2310ca1-dc64-4889-bb49-c8e0fa3d47a8')]",
              "Cognitive Services LUIS Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f72c8140-2111-481c-87ff-72b910f6e3f8')]",
              "Cognitive Services LUIS Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e81cdc-4e98-4e29-a639-e7d10c5a6226')]",
              "Cognitive Services LUIS Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6322a993-d5c9-4bed-b113-e49bbea25b27')]",
              "Cognitive Services Metrics Advisor Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cb43c632-a144-4ec5-977c-e80c4affc34a')]",
              "Cognitive Services Metrics Advisor User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3b20f47b-3825-43cb-8114-4bd2201156a8')]",
              "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
              "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
              "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
              "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
              "Cognitive Services Speech Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e75ca1e-0464-4b4d-8b93-68208a576181')]",
              "Cognitive Services Speech User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]",
              "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(parameters('cMKKeyVaultResourceId'))), not(empty(parameters('cMKKeyName'))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), 'dummyVault'), '/')), if(not(empty(parameters('cMKKeyName'))), parameters('cMKKeyName'), 'dummyKey'))]"
            },
            "defaultTelemetry": {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(parameters('cMKKeyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "subscriptionId": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(parameters('cMKUserAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "subscriptionId": "[split(if(not(empty(parameters('cMKUserAssignedIdentityResourceId'))), parameters('cMKUserAssignedIdentityResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(if(not(empty(parameters('cMKUserAssignedIdentityResourceId'))), parameters('cMKUserAssignedIdentityResourceId'), '////'), '/')[4]]",
              "name": "[last(split(if(not(empty(parameters('cMKUserAssignedIdentityResourceId'))), parameters('cMKUserAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
            },
            "cognitiveServices": {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "identity": "[variables('identity')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "customSubDomainName": "[if(not(empty(parameters('customSubDomainName'))), parameters('customSubDomainName'), parameters('name'))]",
                "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(parameters('hasPrivateLinks'), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                "allowedFqdnList": "[parameters('allowedFqdnList')]",
                "apiProperties": "[parameters('apiProperties')]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "encryption": "[if(not(empty(parameters('cMKKeyName'))), createObject('keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createObject('identityClientId', reference('cMKUserAssignedIdentity').clientId, 'keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyName', parameters('cMKKeyName'), 'keyVersion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null())]",
                "migrationToken": "[if(not(empty(parameters('migrationToken'))), parameters('migrationToken'), null())]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]",
                "userOwnedStorage": "[if(not(empty(parameters('userOwnedStorage'))), parameters('userOwnedStorage'), null())]",
                "dynamicThrottlingEnabled": "[parameters('dynamicThrottlingEnabled')]"
              },
              "dependsOn": [
                "cMKKeyVault::cMKKey",
                "cMKKeyVault",
                "cMKUserAssignedIdentity"
              ]
            },
            "cognitiveServices_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "cognitiveServices"
              ]
            },
            "cognitiveServices_diagnosticSettings": {
              "copy": {
                "name": "cognitiveServices_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'AllLogs', 'enabled', true())))]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "cognitiveServices"
              ]
            },
            "cognitiveServices_roleAssignments": {
              "copy": {
                "name": "cognitiveServices_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "cognitiveServices"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the cognitive services account."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the cognitive services account."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the cognitive services account was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "The service endpoint of the cognitive services account."
              },
              "value": "[reference('cognitiveServices').endpoint]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference('cognitiveServices', '2023-05-01', 'full').identity, 'principalId')), reference('cognitiveServices', '2023-05-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('cognitiveServices', '2023-05-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'la-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('GPT-{0}-deployment', parameters('appname'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "openAiName": {
            "value": "[format('{0}-{1}', parameters('appname'), variables('suffix'))]"
          },
          "deploymentName": {
            "value": "Testgpt35"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "15982309463476724287"
            }
          },
          "parameters": {
            "openAiName": {
              "type": "string",
              "maxLength": 64,
              "metadata": {
                "description": "Required. Name of the existing OpenAI Account"
              }
            },
            "deploymentName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 64,
              "metadata": {
                "description": "Required. Deployment Name can have only letters and numbers, no spaces. Hyphens (\"-\") and underscores (\"_\") may be used, except as ending characters."
              }
            },
            "modelName": {
              "type": "string",
              "defaultValue": "gpt-35-turbo",
              "metadata": {
                "description": "The model name to be deployed. The model name can be found in the OpenAI portal."
              }
            },
            "modelVersion": {
              "type": "string",
              "defaultValue": "0613",
              "metadata": {
                "description": "The model version to be deployed. At the time of writing this is the latest version is eastus2."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('openAiName'), parameters('deploymentName'))]",
              "sku": {
                "name": "Standard",
                "capacity": 1
              },
              "properties": {
                "raiPolicyName": "Microsoft.Default",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('modelName')]",
                  "version": "[parameters('modelVersion')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'OpenAI-Deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "OpenAI-privateDNS-Deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('openAiDnsZoneName')]"
          },
          "virtualNetworkLinks": {
            "value": "[concat(createArray(createObject('vnetName', format('vnet-{0}', variables('baseName')), 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())), createArray(createObject('vnetName', 'vnet-Hub', 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "4935098812369375293"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
              }
            },
            "aRecords": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of A records to be added to the DNS Zone"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "copy": {
                "name": "privateDnsZoneLink",
                "count": "[length(parameters('virtualNetworkLinks'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
              "location": "global",
              "properties": {
                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "dnsARecord",
                "count": "[length(parameters('aRecords'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
              "properties": {
                "ttl": 60,
                "aRecords": [
                  {
                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZonesId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "pe-openai-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "pe-openai"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "privateDnsZonesId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'OpenAI-privateDNS-Deployment'), '2022-09-01').outputs.privateDnsZonesId.value]"
          },
          "privateLinkServiceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'OpenAI-Deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "subresource": {
            "value": "account"
          },
          "snetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.servicesSubnetID.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "3909338819833191592"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 64,
              "metadata": {
                "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "snetId": {
              "type": "string",
              "metadata": {
                "description": "The subnet resource ID where the nic of the PE will be attached to"
              }
            },
            "privateLinkServiceId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
              }
            },
            "subresource": {
              "type": "string",
              "metadata": {
                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
              }
            },
            "privateDnsZonesId": {
              "type": "string",
              "metadata": {
                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('snetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pl-{0}', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": [
                        "[parameters('subresource')]"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'OpenAI-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'OpenAI-privateDNS-Deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "redis-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('redisResourceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "keyvaultName": {
            "value": "[format('kv-{0}', variables('suffix'))]"
          },
          "enableNonSslPort": {
            "value": false
          },
          "skuName": {
            "value": "Premium"
          },
          "diagnosticWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'la-deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "hasPrivateLink": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "8014035355975812784"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the Redis cache resource. Start and end with alphanumeric. Consecutive hyphens not allowed"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy the Redis cache service."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
              }
            },
            "enableNonSslPort": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the non-ssl Redis server port (6379) is enabled."
              }
            },
            "redisConfiguration": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."
              }
            },
            "replicasPerMaster": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary."
              }
            },
            "replicasPerPrimary": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary."
              }
            },
            "shardCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of shards to be created on a Premium Cluster Cache."
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 2,
              "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "metadata": {
                "description": "Optional. The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Premium",
                "Standard"
              ],
              "metadata": {
                "description": "Optional, default is Standard. The type of Redis cache to deploy."
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "allLogs",
                "ConnectedClientList"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "hasPrivateLink": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Has the resource private endpoint?"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogsSpecified",
                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                "input": {
                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                  "enabled": true
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true
                }
              }
            ],
            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2022-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "[if(parameters('hasPrivateLink'), 'Disabled', null())]",
                "redisConfiguration": "[if(not(empty(parameters('redisConfiguration'))), parameters('redisConfiguration'), null())]",
                "redisVersion": "6",
                "replicasPerMaster": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerMaster'), null())]",
                "replicasPerPrimary": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerPrimary'), null())]",
                "shardCount": "[if(equals(parameters('skuName'), 'Premium'), parameters('shardCount'), null())]",
                "sku": {
                  "capacity": "[parameters('capacity')]",
                  "family": "[if(equals(parameters('skuName'), 'Premium'), 'P', 'C')]",
                  "name": "[parameters('skuName')]"
                },
                "subnetId": "[if(not(empty(parameters('subnetId'))), parameters('subnetId'), null())]"
              },
              "zones": "[if(equals(parameters('skuName'), 'Premium'), pickZones('Microsoft.Cache', 'redis', parameters('location'), 1), null())]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'redisConStrSecret')]",
              "properties": {
                "value": "[format('{0},password={1},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').hostName, listKeys(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').primaryKey)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
              "name": "[parameters('diagnosticSettingsName')]",
              "properties": {
                "storageAccountId": null,
                "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                "eventHubAuthorizationRuleId": null,
                "eventHubName": null,
                "metrics": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsMetrics'))]",
                "logs": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsLogs'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The resource name."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID."
              },
              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Redis cache was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "hostName": {
              "type": "string",
              "metadata": {
                "description": "Redis hostname."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').hostName]"
            },
            "sslPort": {
              "type": "int",
              "metadata": {
                "description": "Redis SSL port."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').sslPort]"
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network where the Redis cache was deployed in."
              },
              "value": "[if(not(empty(parameters('subnetId'))), reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').subnetId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01', 'full').location]"
            },
            "redisConnectionStringSecretName": {
              "type": "string",
              "metadata": {
                "description": "The name of the secret in keyvault, holding the connection string to redis."
              },
              "value": "redisConStrSecret"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'la-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "redis-privateendpoint-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "azServiceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'redis-deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "azServicePrivateDnsZoneName": {
            "value": "[variables('redisPrivateDnsZoneNames')]"
          },
          "privateEndpointName": {
            "value": "pe-redis"
          },
          "privateEndpointSubResourceName": {
            "value": "[variables('redisResourceName')]"
          },
          "virtualNetworkLinks": {
            "value": "[concat(createArray(createObject('vnetName', format('vnet-{0}', variables('baseName')), 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())), createArray(createObject('vnetName', 'vnet-Hub', 'vnetId', reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.vnetResourceId.value, 'registrationEnabled', false())))]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment'), '2022-09-01').outputs.servicesSubnetID.value]"
          },
          "vnetHubResourceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment'), '2022-09-01').outputs.vnetResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "9182273978656145953"
            }
          },
          "parameters": {
            "virtualNetworkLinks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
              }
            },
            "vnetHubResourceId": {
              "type": "string",
              "metadata": {
                "description": "if empty, private dns zone will be deployed in the current RG scope"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
              }
            },
            "azServiceId": {
              "type": "string",
              "metadata": {
                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
              }
            },
            "azServicePrivateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Resource name of the Private Endpoint"
              }
            },
            "privateEndpointSubResourceName": {
              "type": "string",
              "metadata": {
                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
              }
            }
          },
          "variables": {
            "vnetHubSplitTokens": "[if(contains(parameters('vnetHubResourceId'), '/'), split(parameters('vnetHubResourceId'), '/'), array(''))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                  },
                  "virtualNetworkLinks": {
                    "value": "[parameters('virtualNetworkLinks')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "4935098812369375293"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateDnsZonesId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                  },
                  "privateLinkServiceId": {
                    "value": "[parameters('azServiceId')]"
                  },
                  "snetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "subresource": {
                    "value": "[parameters('privateEndpointSubResourceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "3909338819833191592"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "snetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                      }
                    },
                    "subresource": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                      }
                    },
                    "privateDnsZonesId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('snetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pl-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subresource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "config1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vNET-ACA-Deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'HubNetwork-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'redis-deployment')]"
      ]
    }
  ]
}